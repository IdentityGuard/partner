<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cardNumberInvalid" xml:space="preserve">
    <value>Card Number is invalid</value>
  </data>
  <data name="cardNumberLength" xml:space="preserve">
    <value>Card Number must be between 9 and 20 digits</value>
  </data>
  <data name="cardNumberRequired" xml:space="preserve">
    <value>Card Number is required</value>
  </data>
  <data name="cityInvalid" xml:space="preserve">
    <value>City is invalid</value>
  </data>
  <data name="cityLength" xml:space="preserve">
    <value>City must be between 2 and 40 characters</value>
  </data>
  <data name="cityRequired" xml:space="preserve">
    <value>City is required</value>
  </data>
  <data name="countryInvalid" xml:space="preserve">
    <value>Country is invalid</value>
  </data>
  <data name="countryLength" xml:space="preserve">
    <value>Country must be 2 characters</value>
  </data>
  <data name="countryRequired" xml:space="preserve">
    <value>Country is required</value>
  </data>
  <data name="cvvInvalid" xml:space="preserve">
    <value>CVV Number is invalid</value>
  </data>
  <data name="cvvLength" xml:space="preserve">
    <value>CVV Number must be between 3 and 4 digits</value>
  </data>
  <data name="cvvRequired" xml:space="preserve">
    <value>CVV Number is required</value>
  </data>
  <data name="expirationMonthInvalid" xml:space="preserve">
    <value>Expiration Month is invalid</value>
  </data>
  <data name="expirationMonthLength" xml:space="preserve">
    <value>Expiration Month must be in MM format</value>
  </data>
  <data name="expirationMonthRequired" xml:space="preserve">
    <value>Expiration Month is required</value>
  </data>
  <data name="expirationYearInvalid" xml:space="preserve">
    <value>Expiration Year is invalid</value>
  </data>
  <data name="expirationYearLength" xml:space="preserve">
    <value>Expiration Year must be in YYYY format</value>
  </data>
  <data name="expirationYearRequired" xml:space="preserve">
    <value>Expiration Year is required</value>
  </data>
  <data name="firstNameInvalid" xml:space="preserve">
    <value>First Name is invalid</value>
  </data>
  <data name="firstNameLength" xml:space="preserve">
    <value>First Name must be between 2 and 40 characters</value>
  </data>
  <data name="firstNameRequired" xml:space="preserve">
    <value>First Name is required</value>
  </data>
  <data name="lastNameInvalid" xml:space="preserve">
    <value>Last Name is invalid</value>
  </data>
  <data name="lastNameLength" xml:space="preserve">
    <value>Last Name must be between 2 and 40 characters</value>
  </data>
  <data name="lastNameRequired" xml:space="preserve">
    <value>Last Name is required</value>
  </data>
  <data name="postalCodeInvalid" xml:space="preserve">
    <value>Postal Code is invalid</value>
  </data>
  <data name="postalCodeLength" xml:space="preserve">
    <value>Postal Code must be 5 digits</value>
  </data>
  <data name="postalCodeRequired" xml:space="preserve">
    <value>Postal Code is required</value>
  </data>
  <data name="stateInvalid" xml:space="preserve">
    <value>State is invalid</value>
  </data>
  <data name="stateLength" xml:space="preserve">
    <value>State must be 2 characters</value>
  </data>
  <data name="stateRequired" xml:space="preserve">
    <value>State is required</value>
  </data>
  <data name="street1Length" xml:space="preserve">
    <value>Street Address Line 1 must be between 3 and 40 characters</value>
  </data>
  <data name="street1Required" xml:space="preserve">
    <value>Street Address Line 1 is required </value>
  </data>
</root>